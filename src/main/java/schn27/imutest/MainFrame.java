/*
 * The MIT License
 *
 * Copyright 2017 Aleksandr Malikov <schn27@gmail.com>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package schn27.imutest;

import java.time.Duration;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import schn27.imutest.device.Link;
import schn27.serial.Com;

/**
 *
 * @author Aleksandr Malikov <schn27@gmail.com>
 */
public class MainFrame extends javax.swing.JFrame {

	/**
	 * Creates new form MainFrame
	 */
	public MainFrame() {
		initComponents();
		initPortList();
		
		consoleOut.setModel(new DefaultListModel());
		
		gitVersion.setText(getVersionString());
		
		portName.addPopupMenuListener(new PopupMenuListener() {
			@Override
			public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
				initPortList();
			}

			@Override
			public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {}

			@Override
			public void popupMenuCanceled(PopupMenuEvent e) {}
		});

		charts = new Charts(chartsPanel, Duration.ofSeconds(3), Duration.ofMillis(19),
				new String[]{"Gyro X", "Gyro Y", "Gyro Z"}, 0.01);
	}
	
	private void initPortList() {
		Object selected = portName.getSelectedItem();
		
		portName.removeAllItems();
		Com.getList().forEach(port -> ((DefaultComboBoxModel)portName.getModel()).addElement(port));
		
		if (selected != null) {
			portName.setSelectedItem(selected);
		}
	}
	
	private static String getVersionString() {
		String v = schn27.imutest.Version.get();
		return (v != null) ? v.substring(0, 8) : "<empty>";
	}
	
	private void printToConsoleOut(String text) {
		((DefaultListModel)consoleOut.getModel()).addElement(text);
		consoleOut.ensureIndexIsVisible(consoleOut.getModel().getSize() - 1);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOpen = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        chartsPanel = new javax.swing.JPanel();
        consolePanel = new javax.swing.JPanel();
        consoleIn = new javax.swing.JTextField();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        consoleOut = new javax.swing.JList();
        portName = new javax.swing.JComboBox();
        gitVersion = new javax.swing.JLabel();
        baudRate = new javax.swing.JComboBox();
        lostMessages = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.title")); // NOI18N
        setLocationByPlatform(true);

        btnOpen.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.btnOpen.text")); // NOI18N
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        tabbedPane.setToolTipText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.tabbedPane.toolTipText")); // NOI18N
        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        chartsPanel.setLayout(new java.awt.BorderLayout());
        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.chartsPanel.TabConstraints.tabTitle"), chartsPanel); // NOI18N

        consoleIn.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.consoleIn.text")); // NOI18N
        consoleIn.setToolTipText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.consoleIn.toolTipText")); // NOI18N
        consoleIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consoleInActionPerformed(evt);
            }
        });

        consoleOut.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(consoleOut);

        javax.swing.GroupLayout consolePanelLayout = new javax.swing.GroupLayout(consolePanel);
        consolePanel.setLayout(consolePanelLayout);
        consolePanelLayout.setHorizontalGroup(
            consolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 811, Short.MAX_VALUE)
            .addComponent(consoleIn)
        );
        consolePanelLayout.setVerticalGroup(
            consolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, consolePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(consoleIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.consolePanel.TabConstraints.tabTitle"), consolePanel); // NOI18N

        portName.setToolTipText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.portName.toolTipText")); // NOI18N

        gitVersion.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.gitVersion.text")); // NOI18N
        gitVersion.setToolTipText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.gitVersion.toolTipText")); // NOI18N

        baudRate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "9600", "19200", "38400", "57600", "115200", "460800", "576000", "921600" }));
        baudRate.setSelectedIndex(7);
        baudRate.setToolTipText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.baudRate.toolTipText")); // NOI18N

        lostMessages.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.lostMessages.text")); // NOI18N
        lostMessages.setToolTipText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.lostMessages.toolTipText")); // NOI18N
        lostMessages.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(portName, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(baudRate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lostMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(gitVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(baudRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(portName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnOpen)
                        .addComponent(gitVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lostMessages)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
		if (link == null) {
			((DefaultListModel)consoleOut.getModel()).clear();
			charts.clear();
			
			String portNameStr = (String)portName.getSelectedItem();
			
			if (portNameStr != null) {
				link = new Link(
						portNameStr,
						Integer.parseInt((String)baudRate.getSelectedItem()),
						status -> java.awt.EventQueue.invokeLater(() -> {
							charts.add(status);
							lostMessages.setText(Integer.toString((Integer)status.getOrDefault("Lost messages", 0)));
						}),
						consoleString -> java.awt.EventQueue.invokeLater(() -> printToConsoleOut(consoleString))
				);
				
				(new Thread(link)).start();
			}
        } else {
            link.stop();
            link = null;
        }

        portName.setEnabled(link == null);
        btnOpen.setText(link == null ? "Open" : "Close");
    }//GEN-LAST:event_btnOpenActionPerformed

    private void consoleInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consoleInActionPerformed
		consoleIn.setText("");
		if (link != null) {
			link.consoleCommand(evt.getActionCommand());
		}
    }//GEN-LAST:event_consoleInActionPerformed

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        if (link != null) {
			link.setMode(tabbedPane.getSelectedComponent() == consolePanel);
		}
    }//GEN-LAST:event_tabbedPaneStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox baudRate;
    private javax.swing.JButton btnOpen;
    private javax.swing.JPanel chartsPanel;
    private javax.swing.JTextField consoleIn;
    private javax.swing.JList consoleOut;
    private javax.swing.JPanel consolePanel;
    private javax.swing.JLabel gitVersion;
    private javax.swing.JTextField lostMessages;
    private javax.swing.JComboBox portName;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

	private Link link;
	private final Charts charts;
}
